import React, { useContext, useEffect, useState } from 'react'
import Head from 'next/head'
import Layout from '../../components/Layout'
import Categories from '../../components/Categories'
import Posts from '../../components/Posts'
import { useRouter } from 'next/router'
import { Store } from '../../utils/Store'
import ProfileBanner from '../../components/ProfileBanner'
import styles from '../../styles/Profile.module.css'
import { db, storage } from '../../utils/firebase'
import { addDoc, collection, doc, serverTimestamp, updateDoc, query, where, onSnapshot, getDocs } from '@firebase/firestore'
import { getDownloadURL, uploadString, ref } from 'firebase/storage'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import EditProfile from './../../components/EditProfile';
import ProfileNavigator from './../../components/ProfileNavigator';
import Followers from '../../components/Followers'
const Profile = ({ posts, profilePageInfo }) => {
   

    const router = useRouter()
    const { state, dispatch } = useContext(Store)
    const [showEditProfile, setShowEditProfile] = useState(false)
    const [navigatorSelect, setNavigatorSelect] = useState(0)
    const { userInfo } = state
    useEffect(() => {
        if (!userInfo) router.push('/login')
    })
    return (
        <div className={styles.container}>
            <Head>
                <title>HQSocial</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossOrigin="anonymous" referrerpolicy="no-referrer" />
                
            </Head>
            <Layout>
                <ToastContainer />
                {showEditProfile && <EditProfile setShowEditProfile={setShowEditProfile} toast={toast} />}
                <div className={styles.profileContainer}>
                    <div className={styles.categories}>
                        <Categories />
                    </div>
                    <div className={styles.posts}>
                        <ProfileBanner setShowEditProfile={setShowEditProfile} profilePageInfo={profilePageInfo} />
                        {profilePageInfo ? <ProfileNavigator setNavigatorSelect={setNavigatorSelect} navigatorSelect={navigatorSelect} /> : null}
                        {(navigatorSelect == 0) ? <Posts posts={posts} /> : <Followers followers={profilePageInfo.followers} />}
                    </div>
                </div>
            </Layout>
        </div>
    )
}


export const getServerSideProps = async ({ query: url_query }) => {
    const { id } = url_query
    const postRef = collection(db, "posts")
    let posts = []
    if (!postRef) return
    const postQuery = query(postRef, where("username", "==", id))
    const querySnapshot = await getDocs(postQuery)
    querySnapshot.forEach((snapshot) => {
        const postData = { ...snapshot.data(), postId: snapshot.id }

        posts.push(postData)
    })
    const userRef = collection(db, "users")
    const userQuery = query(userRef, where("username", "==", id))
    const userQuerySnapshot = await getDocs(userQuery)

    const { username, profilePic, bannerImage, bio, followers } = (userQuerySnapshot.docs[0]) ? userQuerySnapshot.docs[0].data() : {}
    const profilePageInfo = (userQuerySnapshot.docs[0]) ?
        { username, profilePic, bannerImage, bio, followers } :
        null

    return {
        props: {
            posts: posts,
            profilePageInfo
        }
    }

}

export default Profile